# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.7

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/laminar

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: Build/Install dependencies
          command: |
            pip install virtualenv
            python3 -m virtualenv venv
            . venv/bin/activate
            pip install -r requirements.txt
            pip install coveralls

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - persist_to_workspace:
          root: ~/laminar
          paths:
            - .

  test:
    docker:
      - image: circleci/python:3.7

    working_directory: /tmp/src/laminar

    steps:
      - attach_workspace:
          at: /tmp/src/laminar

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: Code Coverage report
          command: |
            . venv/bin/activate
            mkdir test-results
            pytest -v --cov ./test --log-file=./test_log.txt --junitxml=test-results/junit.xml
            coveralls

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results

      - store_artifacts:
          path: htmlcov

workflows:
  version: 2.1
  build-test:
    jobs:
      - build

      - test:
          requires:
            - build

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      # - run:
      #     name: run tests
      #     command: |
      #       . venv/bin/activate
      #       pytest --cov -v
      #       coveralls
      #
      # - store_artifacts:
      #     path: test-reports
      #     destination: test-reports
